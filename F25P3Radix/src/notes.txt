        //prints in ints
//        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileName))) {
//            int byteData;
//            while ((byteData = bis.read()) != -1) {
//                System.out.println(byteData + " ");
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
        //prints in binary
//        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileName))) {
//            int byteData;
//            while ((byteData = bis.read()) != -1) {
//                // Convert each byte to an 8-bit binary string
//                String binaryString = String.format("%8s", Integer.toBinaryString(byteData))
//                                        .replace(' ', '0');
//                System.out.println(binaryString);
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
        //prints out everything right
//        try (DataInputStream dis = new DataInputStream(
//            new BufferedInputStream(new FileInputStream(fileName)))) {
//
//        int count = 0;
//        while (dis.available() >= 4) { // while at least 4 bytes remain
//            int value = dis.readInt(); // read one 4-byte integer
//
//            // Format as 32-bit binary with leading zeros
//            String binaryString = String.format("%32s", Integer.toBinaryString(value))
//                                    .replace(' ', '0');
//
//            System.out.println("Value " + (++count) + ": " + binaryString + " (" + value + ")");
//        }
//
//    } catch (IOException e) {
//        e.printStackTrace();
//    }


        String filename = "input.txt"; //should change based on what file we are in
        try (RandomAccessFile raf = new RandomAccessFile(filename, "r");
             FileChannel channel = raf.getChannel()) {

            long fileSize = channel.size();
            ByteBuffer buffer = ByteBuffer.allocate((int) fileSize);
            channel.read(buffer);
            buffer.flip();
            IntBuffer intBuffer = buffer.asIntBuffer();
            for (int i = 0; i < intBuffer.remaining(); i++) {
                numberOfBlocks++;
                int value = intBuffer.get(i);
                String binary = String.format("%32s", Integer.toBinaryString(value))
                                  .replace(' ', '0');
                System.out.println("Index " + numberOfBlocks + ": " + binary + " (" + value + ")");
            }
            
            

        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
         String fileName = "input.txt";

        try (DataInputStream dis = new DataInputStream(
                new BufferedInputStream(new FileInputStream(fileName)))) {
            int fileSize = dis.available();
            int numInts = fileSize / 4;
            int[] values = new int[numInts];

            for (int i = 0; i < numInts; i++) {
                values[i] = dis.readInt();
            }
            for (int v : values) {
                numberOfBlocks++;
                System.out.println(v);
            }
            /*
             * sorting the array
             *    Find the number of digits of the max number
             *    for each digit
             *          count the number of records in each bin
             *          get total - count [j]
             *          put records into new bins working from left to right
             */
            //max digits is 10 for now
            for(int e = 1; 2000000000/e>10; e=e*10) {
                int[] output = new int[numberOfBlocks];
                int n = numberOfBlocks;
                int [] count = new int[10];
                for (int i=0; i<values.length; i++) {
                    count[(values[i]/e)%10]++; 
                }
                for (int j = 1; j < 10; j++) {
                    count[j] += count[j - 1];
                }
                for (int i = n - 2; i >= 0; i--) {
                    //System.out.println(count[(values[i] / e) % 10] - 1+" here"+numberOfBlocks);
                    output[count[(values[i] / e) % 10] - 1] = values[i];
                    count[(values[i] / e) % 10]--;
                }
                for (int v : output) {
                    System.out.println(v+" number "+e);
                }
            }
    }